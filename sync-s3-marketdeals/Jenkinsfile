pipeline {
    parameters {
        string name: 'TAG', defaultValue: '0.0.1', description: 'Tag for image'
        string name: 'REGISTRY', defaultValue: 'glif/sync-s3-marketdeals', description: 'registry to push image'
        booleanParam name: 'LATEST', defaultValue: true, description: 'Tag image as latest or not'
        string name: 'DOCKERFILE', defaultValue: 'sync-s3-marketdeals/Dockerfile', description: 'path to Dockerfile'
    }
    options {
        buildDiscarder logRotator(numToKeepStr: '10')
        timeout(10)
        disableConcurrentBuilds()
        timestamps ()
    }
    environment {
        dockerImage = ''
        registryCredential = 'dockerhub'
        registryLink = 'https://hub.docker.com/repository/docker/'
    }
    agent {
      label 'ec2-fleet'
    }
    stages {
        stage('checkout dockerfile') {
            steps {
                checkout(
                    [$class: 'GitSCM', 
                    branches: [[name: '*/master']], 
                    extensions: [[$class: 'CheckoutOption', timeout: 10]],
                    userRemoteConfigs: [[url: 'https://github.com/glifio/filecoin-docker.git']]])
            }
        }
        stage ("lint dockerfile") {
            steps {
                script {
                    docker.image('hadolint/hadolint:latest-alpine').inside {
                        sh "hadolint ${params.DOCKERFILE} | tee hadolint_lint.txt"
                        archiveArtifacts 'hadolint_lint.txt'
                    }
                }
            }
        }
        stage('build image') {
            steps {
                script {
                    dockerImage = docker.build(params.REGISTRY, "--build-arg --no-cache " + 
                        "--network host -f ${params.DOCKERFILE} .")
                    echo('quick test for container')
                    dockerImage.inside {
                        sh '''set -eou pipefail;
                        jq --help;
                        curl --help
                        aws --help'''.stripMargin().stripIndent()
                    }
                }
            }
        }
        stage('push image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', registryCredential) {
                        dockerImage.push(params.TAG)
                        if (params.LATEST) {
                            dockerImage.push("latest")
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend channel: '#filecoin-monitoring-dev', 
                color: '#24853E', 
                failOnError: true, 
                iconEmoji: ':smile:', 
                message: "Build finished succesfully links to registry and build:\n" +
                    "${registryLink + REGISTRY}\n${BUILD_URL}",
                tokenCredentialId: 'SLACK_TOKEN', 
                username: 'jenkins'
        }
        unsuccessful {
            slackSend channel: '#filecoin-monitoring-dev', 
                color: '#852C24', 
                failOnError: true, 
                iconEmoji: ':sob:', 
                message: "Something goes wrong with build, please check the link:\n${BUILD_URL}", 
                tokenCredentialId: 'SLACK_TOKEN', 
                username: 'jenkins'
        }
    }
}
